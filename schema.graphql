type Block @entity {
  # block hash
  id: ID!
  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: Int
  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Event @entity {
  # <block number>-<event index>
  id: ID!
  index: Int!
  section: String!
  method: String!
  data: String!
  block: Block!
  extrinsic: Extrinsic
}

type Extrinsic @entity {
  # extrinsic hash
  id: ID!
  method: String
  section: String
  args: String
  signer: Account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: BigInt
  isSigned: Boolean
  isSuccess: Boolean
  block: Block
  events: [Event] @derivedFrom(field: "extrinsic")
}

type Account @entity {
  # ss58 Address
  id: ID!
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")
  travelCabins: String
  dpos: String
}

type Transfer @entity {
  # <block number>-<event index>
  id: ID!
  timestamp: Date
  from: Account
  to: Account
  token: String
  amount: BigInt
}

type Swap @entity {
  # <block number>-<event index>
  id: ID!
  timestamp: Date
  token1: String
  tokenAmount1: BigInt
  token2: String
  tokenAmount2: BigInt
  price: String
}
