type Block @entity {
  # block hash
  id: ID!
  number: BigInt
  timestamp: BigInt
  parentHash: String
  specVersion: Int
  extrinsics: [Extrinsic!] @derivedFrom(field: "block")
  events: [Event!] @derivedFrom(field: "block")
}

type Event @entity {
  # <block number>-<event index>
  id: ID!
  index: Int!
  section: String!
  method: String!
  data: String!
  block: Block!
  extrinsic: Extrinsic
}

type Extrinsic @entity {
  # extrinsic hash
  id: ID!
  method: String
  section: String
  args: String
  signer: Account
  nonce: BigInt
  timestamp: BigInt
  signature: String
  tip: BigInt
  isSigned: Boolean
  isSuccess: Boolean
  block: Block
  events: [Event!] @derivedFrom(field: "extrinsic")
}

type Account @entity {
  # ss58 Address
  id: ID!
  extrinsics: [Extrinsic!] @derivedFrom(field: "signer")
  transferIn: [Transfer!] @derivedFrom(field: "to")
  transferOut: [Transfer!] @derivedFrom(field: "from")
  referees: String
  travelCabins: String
  dpos: String
}

type Transfer @entity {
  # <block number>-<event index>
  id: ID!
  timestamp: BigInt!
  from: Account!
  to: Account!
  token: String!
  amount: BigInt!
}

type Pair @entity {
  # trading pair
  # <token1>-<token2>
  id: ID!
  token1: String!
  poolAmount1: BigInt!
  token2: String!
  poolAmount2: BigInt!
  pairHourData: [PairHourData!] @derivedFrom(field: "pair")
}

type PairHourData @entity {
  # <token1>-<token2>-<hourIndex>
  id: ID!
  hourStartTime: BigInt!
  pair: Pair!
  poolAmount1: BigInt!
  poolAmount2: BigInt!
  hourlyVolumeToken1: BigInt!
  hourlyVolumeToken2: BigInt!
  hourlyTxns: BigInt!
}
